// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student  Student?
  teacher  Teacher?
  parent   Parent?
  admin    Admin?
  sessions Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// School Structure
model School {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String
  phone       String
  email       String
  website     String?
  logo        String?
  established DateTime?
  principal   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  academicYears AcademicYear[]
  classes       Class[]
  subjects      Subject[]
  students      Student[]
  teachers      Teacher[]
  staff         Staff[]
  fees          Fee[]
  events        Event[]

  @@map("schools")
}

model AcademicYear {
  id        String   @id @default(cuid())
  schoolId  String
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classes  Class[]
  subjects Subject[]
  fees     Fee[]

  @@unique([schoolId, name])
  @@map("academic_years")
}

model Class {
  id             String @id @default(cuid())
  schoolId       String
  academicYearId String
  name           String
  section        String
  capacity       Int    @default(40)
  roomNumber     String?
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  school       School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  students     Student[]
  timetables   Timetable[]
  subjects     ClassSubject[]

  @@unique([schoolId, academicYearId, name, section])
  @@map("classes")
}

model Subject {
  id             String @id @default(cuid())
  schoolId       String
  academicYearId String
  name           String
  code           String
  description    String?
  credits        Int    @default(1)
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  school       School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYear AcademicYear   @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classes      ClassSubject[]
  assignments  Assignment[]
  exams        Exam[]

  @@unique([schoolId, academicYearId, code])
  @@map("subjects")
}

model ClassSubject {
  id        String @id @default(cuid())
  classId   String
  subjectId String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
  @@map("class_subjects")
}

// Student Management
model Student {
  id             String   @id @default(cuid())
  userId         String   @unique
  schoolId       String
  classId        String
  admissionNo    String   @unique
  rollNumber     String?
  dateOfBirth    DateTime
  gender         Gender
  bloodGroup     String?
  address        String
  phone          String?
  emergencyPhone String
  medicalInfo    String?
  isActive       Boolean  @default(true)
  admissionDate  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  parents     StudentParent[]
  attendance  Attendance[]
  assignments AssignmentSubmission[]
  examResults ExamResult[]
  feeRecords  FeeRecord[]

  @@map("students")
}

model Parent {
  id           String   @id @default(cuid())
  userId       String   @unique
  fatherName   String?
  motherName   String?
  occupation   String?
  phone        String
  address      String
  relationship String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  students StudentParent[]

  @@map("parents")
}

model StudentParent {
  id        String   @id @default(cuid())
  studentId String
  parentId  String
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@map("student_parents")
}

// Teacher Management
model Teacher {
  id              String   @id @default(cuid())
  userId          String   @unique
  schoolId        String
  employeeId      String   @unique
  department      String?
  qualification   String?
  experience      Int?
  salary          Float?
  dateOfJoining   DateTime
  address         String
  phone           String
  emergencyPhone  String
  subjects        String?  // Comma-separated subject specializations
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classSubjects ClassSubject[]
  attendance    TeacherAttendance[]
  assignments   Assignment[]
  timetables    Timetable[]

  @@map("teachers")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  schoolId  String?
  level     AdminLevel @default(SCHOOL)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Staff {
  id             String   @id @default(cuid())
  schoolId       String
  employeeId     String   @unique
  name           String
  email          String   @unique
  phone          String
  position       String
  department     String?
  salary         Float?
  dateOfJoining  DateTime
  address        String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("staff")
}

// Academic Management
model Timetable {
  id        String    @id @default(cuid())
  classId   String
  teacherId String
  day       DayOfWeek
  period    Int
  startTime String
  endTime   String
  roomNo    String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([classId, day, period])
  @@map("timetables")
}

model Assignment {
  id          String   @id @default(cuid())
  teacherId   String
  subjectId   String
  title       String
  description String
  dueDate     DateTime
  maxMarks    Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher     Teacher                @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject     Subject                @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  content      String
  attachments  String?   // Comma-separated file paths/URLs
  marksObtained Int?
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?
  isLate       Boolean   @default(false)

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

model Exam {
  id          String   @id @default(cuid())
  subjectId   String
  title       String
  description String?
  examDate    DateTime
  startTime   String
  endTime     String
  maxMarks    Int      @default(100)
  passingMarks Int     @default(40)
  examType    ExamType
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subject Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  results ExamResult[]

  @@map("exams")
}

model ExamResult {
  id            String   @id @default(cuid())
  examId        String
  studentId     String
  marksObtained Int
  grade         String?
  remarks       String?
  isAbsent      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  exam    Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([examId, studentId])
  @@map("exam_results")
}

// Attendance Management
model Attendance {
  id        String         @id @default(cuid())
  studentId String
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@map("attendance")
}

model TeacherAttendance {
  id        String         @id @default(cuid())
  teacherId String
  date      DateTime
  status    AttendanceStatus
  checkIn   DateTime?
  checkOut  DateTime?
  remarks   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, date])
  @@map("teacher_attendance")
}

// Fee Management
model Fee {
  id             String   @id @default(cuid())
  schoolId       String
  academicYearId String
  name           String
  amount         Float
  dueDate        DateTime
  feeType        FeeType
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  school       School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  records      FeeRecord[]

  @@map("fees")
}

model FeeRecord {
  id            String        @id @default(cuid())
  feeId         String
  studentId     String
  amountPaid    Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  transactionId String?
  status        PaymentStatus @default(PENDING)
  remarks       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  fee     Fee     @relation(fields: [feeId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("fee_records")
}

// Events and Announcements
model Event {
  id          String    @id @default(cuid())
  schoolId    String
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String?
  eventType   EventType
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("events")
}

// Inventory Management
model InventoryItem {
  id          String @id @default(cuid())
  name        String
  description String?
  category    String
  quantity    Int    @default(0)
  unitPrice   Float?
  supplier    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("inventory_items")
}

// Transportation
model Bus {
  id          String @id @default(cuid())
  busNumber   String @unique
  driverName  String
  driverPhone String
  route       String
  capacity    Int
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("buses")
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  PARENT
  STAFF
}

enum AdminLevel {
  SUPER
  SCHOOL
  DEPARTMENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
}

enum ExamType {
  UNIT_TEST
  MIDTERM
  FINAL
  ASSIGNMENT
  PROJECT
}

enum FeeType {
  TUITION
  TRANSPORT
  LIBRARY
  LABORATORY
  SPORTS
  EXAM
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  ONLINE
  CHEQUE
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  REFUNDED
}

enum EventType {
  ACADEMIC
  SPORTS
  CULTURAL
  HOLIDAY
  MEETING
  EXAMINATION
  OTHER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
